$date
	Sun Oct 27 21:11:09 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb $end
$var wire 16 ! out [15:0] $end
$var reg 4 " W0 [3:0] $end
$var reg 4 # W1 [3:0] $end
$var reg 4 $ W2 [3:0] $end
$var reg 4 % W3 [3:0] $end
$var reg 4 & X0 [3:0] $end
$var reg 4 ' X1 [3:0] $end
$var reg 4 ( X2 [3:0] $end
$var reg 4 ) X3 [3:0] $end
$var reg 1 * clk $end
$var reg 16 + expected_out [15:0] $end
$var reg 16 , psum_in [15:0] $end
$var integer 32 - i [31:0] $end
$var integer 32 . w_dec [31:0] $end
$var integer 32 / w_file [31:0] $end
$var integer 32 0 w_scan_file [31:0] $end
$var integer 32 1 x_dec [31:0] $end
$var integer 32 2 x_file [31:0] $end
$var integer 32 3 x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 5 4 a [4:0] $end
$var reg 5 5 a_q [4:0] $end
$var reg 4 6 b [3:0] $end
$var reg 4 7 b_q [3:0] $end
$var reg 5 8 c [4:0] $end
$var reg 5 9 c_q [4:0] $end
$var reg 4 : d [3:0] $end
$var reg 4 ; d_q [3:0] $end
$var reg 16 < mac_predicted [15:0] $end
$var reg 16 = psum [15:0] $end
$upscope $end
$scope function w_bin $end
$var reg 4 > w_bin [3:0] $end
$var integer 32 ? weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var reg 4 @ x_bin [3:0] $end
$var integer 32 A activation [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 B W0 [3:0] $end
$var wire 4 C W1 [3:0] $end
$var wire 4 D W2 [3:0] $end
$var wire 4 E W3 [3:0] $end
$var wire 4 F X0 [3:0] $end
$var wire 4 G X1 [3:0] $end
$var wire 4 H X2 [3:0] $end
$var wire 4 I X3 [3:0] $end
$var wire 1 * clk $end
$var wire 16 J psum_in [15:0] $end
$var wire 16 K out [15:0] $end
$var reg 4 L W0_q [3:0] $end
$var reg 4 M W1_q [3:0] $end
$var reg 4 N W2_q [3:0] $end
$var reg 4 O W3_q [3:0] $end
$var reg 4 P X0_q [3:0] $end
$var reg 4 Q X1_q [3:0] $end
$var reg 4 R X2_q [3:0] $end
$var reg 4 S X3_q [3:0] $end
$var reg 16 T psum_in_q [15:0] $end
$scope module mac_instance $end
$var wire 4 U W0 [3:0] $end
$var wire 4 V W1 [3:0] $end
$var wire 4 W W2 [3:0] $end
$var wire 4 X W3 [3:0] $end
$var wire 4 Y X0 [3:0] $end
$var wire 4 Z X1 [3:0] $end
$var wire 4 [ X2 [3:0] $end
$var wire 4 \ X3 [3:0] $end
$var wire 16 ] psum_in [15:0] $end
$var wire 16 ^ out [15:0] $end
$var wire 9 _ acc1 [8:0] $end
$var wire 9 ` acc0 [8:0] $end
$var wire 5 a X3_ex [4:0] $end
$var wire 5 b X2_ex [4:0] $end
$var wire 5 c X1_ex [4:0] $end
$var wire 5 d X0_ex [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxx d
b0xxxx c
b0xxxx b
b0xxxx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
b10000000000000000000000000000100 2
bx 1
bx 0
b10000000000000000000000000000011 /
bx .
bx -
bx ,
b0 +
0*
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
1*
#3
b0 -
0*
#4
1*
#5
b1 -
b1111111111010000 +
b1111111111010000 <
b110 4
b1 6
b111 8
b1001 :
b1 5
b111 7
b11 9
b1100 ;
b0 =
b0 ,
b0 J
b1100 %
b1100 E
b11 )
b11 I
b111 $
b111 D
b1 (
b1 H
b1001 #
b1001 C
b111 '
b111 G
b1 "
b1 B
b1100 >
b0 ?
b110 &
b110 F
b11 @
b1 A
b1 3
b11 1
b1 0
b11111111111111111111111111111100 .
0*
#6
b1111111111010000 !
b1111111111010000 K
b1111111111010000 ^
b0 T
b0 ]
b111111011 _
b1100 O
b1100 X
b111 N
b111 W
b111010101 `
b1001 M
b1001 V
b1 L
b1 U
b11 a
b11 S
b11 \
b1 b
b1 R
b1 [
b111 c
b111 Q
b111 Z
b110 d
b110 P
b110 Y
1*
#7
b10 -
b1111111110011110 +
b1111111110011110 <
b10 4
b1101 6
b10 8
b1110 :
b1111 5
b1100 7
b100 9
b101 ;
b1111111111010000 =
b1111111111010000 ,
b1111111111010000 J
b101 %
b101 E
b100 )
b100 I
b1100 $
b1100 D
b1111 (
b1111 H
b1110 #
b1110 C
b10 '
b10 G
b1101 "
b1101 B
b101 >
b1 ?
b10 &
b10 F
b100 @
b0 A
b100 1
b101 .
0*
#8
b1111111111010000 T
b1111111111010000 ]
b101 O
b101 X
b1100 N
b1100 W
b1110 M
b1110 V
b1101 L
b1101 U
b100 a
b100 S
b100 \
b111011000 _
b1111 b
b1111 R
b1111 [
b10 c
b10 Q
b10 Z
b1111111110011110 !
b1111111110011110 K
b1111111110011110 ^
b111110110 `
b10 d
b10 P
b10 Y
1*
#9
b11 -
b1111111110000110 +
b1111111110000110 <
b110 4
b1010 6
b100 8
b100 :
b0 5
b10 7
b10 9
b1110 ;
b1111111110011110 =
b1111111110011110 ,
b1111111110011110 J
b1110 %
b1110 E
b10 )
b10 I
b10 $
b10 D
b0 (
b0 H
b100 #
b100 C
b100 '
b100 G
b1010 "
b1010 B
b1110 >
b0 ?
b110 &
b110 F
b10 @
b0 A
b10 1
b11111111111111111111111111111110 .
0*
#10
b1111111110011110 T
b1111111110011110 ]
b1110 O
b1110 X
b10 N
b10 W
b100 M
b100 V
b1010 L
b1010 U
b10 a
b10 S
b10 \
b111111100 _
b0 b
b0 R
b0 [
b100 c
b100 Q
b100 Z
b1111111110000110 !
b1111111110000110 K
b1111111110000110 ^
b111101100 `
b110 d
b110 P
b110 Y
1*
#11
b100 -
b1111111101011001 +
b1111111101011001 <
b1 4
b0 6
b1010 8
b1100 :
b10 5
b11 7
b1011 9
b1111 ;
b1111111110000110 =
b1111111110000110 ,
b1111111110000110 J
b1111 %
b1111 E
b1011 )
b1011 I
b11 $
b11 D
b10 (
b10 H
b1100 #
b1100 C
b1 ?
b1010 '
b1010 G
b0 "
b0 B
b1111 >
b1 &
b1 F
b1011 @
b1 A
b1011 1
b11111111111111111111111111111111 .
0*
#12
b1111111110000110 T
b1111111110000110 ]
b1111 O
b1111 X
b11 N
b11 W
b1100 M
b1100 V
b0 L
b0 U
b1011 a
b1011 S
b1011 \
b111111011 _
b10 b
b10 R
b10 [
b1010 c
b1010 Q
b1010 Z
b1111111101011001 !
b1111111101011001 K
b1111111101011001 ^
b111011000 `
b1 d
b1 P
b1 Y
1*
#13
b101 -
b1111111101111111 +
b1111111101111111 <
b10 4
b1100 6
b110 8
b101 :
b100 5
b1010 7
b1010 9
b100 ;
b1111111101011001 =
b1111111101011001 ,
b1111111101011001 J
b100 %
b100 E
b1010 )
b1010 I
b1010 $
b1010 D
b100 (
b100 H
b101 #
b101 C
b110 '
b110 G
b1100 "
b1100 B
b100 >
b0 ?
b10 &
b10 F
b1010 @
b0 A
b1010 1
b100 .
0*
#14
b1111111101011001 T
b1111111101011001 ]
b100 O
b100 X
b1010 N
b1010 W
b101 M
b101 V
b1100 L
b1100 U
b1010 a
b1010 S
b1010 \
b10000 _
b100 b
b100 R
b100 [
b1111111101111111 !
b1111111101111111 K
b1111111101111111 ^
b10110 `
b110 c
b110 Q
b110 Z
b10 d
b10 P
b10 Y
1*
#15
0*
#25
